@page "/countries"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>Paises</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/countries/create">Nuevo País</a>
</div>

<Pagination CurrentPage="currentPage"
            TotalPages="totalPages"
            SelectedPage="SelectedPage" />

<GenericList MyList="Countries">
    <RecordsComplete>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>País</th>
                    <th>Departamentos/Estados</th>
                    <th style="width:280px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        <td>
                            @country.Name
                        </td>
                        <td>
                            @country.StatesNumber
                        </td>
                        <td>
                            <a href="/countries/details/@country.Id" class="btn btn-info">Detalles</a>
                            <a href="/countries/edit/@country.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(country.Id))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </RecordsComplete>
</GenericList>

@code {
    public List<Country>? Countries { get; set; }
    private int currentPage = 1;
    private int totalPages;

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.Get<List<Country>>("api/countries");
        Countries = responseHppt.Response!;
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        var responseHppt = await repository.Get<List<Country>>($"api/countries?page={page}");
        var responseHppt2 = await repository.Get<int>($"api/countries/totalPages");
        Countries = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/countries/{id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }

        await LoadAsync();
    }
}
